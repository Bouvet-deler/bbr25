import random
import uuid
import requests
import json
from pprint import pprint
from bbr_types import GameStateDto

class Api:
    def __init__(self, save_file: str = 'player_info.json'):
        self.base_url: str = 'http://localhost:5186'
        self.player_id: str | None = None
        self.player_name: str | None = None
        self.game_name: str | None = None

        try:
            with open(save_file, 'r') as f:
                player_info = json.load(f)
                self.player_id = player_info['player_id']
                self.player_name = player_info['player_name']
                self.game_name = player_info['game_name']
            id = self.join_game(self.game_name)
        except FileNotFoundError:
            self.player_name = input("Enter player name: ").strip()
            self.player_id = str(uuid.uuid4())
            print("Available games:")
            pprint(self.get_all_games())
            id = self.join_game(input("Enter game name to join (CASE SENSITIVE!): ").strip())
        player_info = {
            'player_id': id,
            'player_name': self.player_name,
            'game_name': self.game_name
        }
        with open(save_file, 'w') as f:
            json.dump(player_info, f)

    def get_all_games(self):
        params = {}
        if self.player_id:
            params['playerId'] = self.player_id
        return self.make_request('/api/game/all?' + '&'.join(f'{k}={v}' for k,v in params.items()))


    def get_game_state(self) -> GameStateDto:
        params = {'gameName': self.game_name}
        if self.player_id:
            params['playerId'] = self.player_id
        response = self.make_request('/api/game?' + '&'.join(f'{k}={v}' for k,v in params.items()))
        return GameStateDto(**response)

    def join_game(self, game_name):
        if game_name != self.game_name:
            print("Switch from game", self.game_name, "to", game_name)
            self.game_name = game_name

        if self.player_id is None:
            print("You must set a player ID yourself now!")
            exit(1)
        print("Checking if you're in the game already...")
        state = self.get_game_state()
        for player in state.players:
            if player['name'] == self.player_name:
                print(self.player_name, "is already in the game")
                return self.player_id
        response = self.make_request(f'/api/game/join?gameName={game_name}&name={self.player_name}&playerKey={self.player_id}')
        return response

    def start_game(self):
        return self.make_request(f'/api/game/start?gameName={self.game_name}')

    # Everything beyond this point is generated by Claude.ai, no human has reviewed this code!

    def check_timeout(self):
        return self.make_request(f'/api/game/check-for-timeout?gameName={self.game_name}')

    def stop_game(self, ):
        return self.make_request('/api/game/stop')

    def get_scores(self, ):
        return self.make_request('/api/score/get')

    def plant_card(self, game_name, player_id, field_id):
        params = {
            'gameName': game_name,
            'playerId': player_id,
            'fieldId': field_id
        }
        return self.make_request('/api/playing/plant?' + '&'.join(f'{k}={v}' for k,v in params.items()))

    def end_planting(self, game_name, player_id):
        return self.make_request(f'/api/playing/end-planting?gameName={game_name}&playerId={player_id}')

    def end_trading(self, game_name, player_id):
        return self.make_request(f'/api/playing/end-trading?gameName={game_name}&playerId={player_id}')

    def trade_plant(self, game_name, player_id, card_id, field_id):
        params = {
            'gameName': game_name,
            'playerId': player_id,
            'cardId': card_id,
            'fieldId': field_id
        }
        return self.make_request('/api/playing/trade-plant?' + '&'.join(f'{k}={v}' for k,v in params.items()))

    def harvest_field(self, game_name, player_id, field_id):
        params = {
            'gameName': game_name,
            'playerId': player_id,
            'fieldId': field_id
        }
        return self.make_request('/api/playing/harvest-field?' + '&'.join(f'{k}={v}' for k,v in params.items()))

    def request_trade(self, game_name, player_id, offered_cards, wanted_cards):
        body = {
            'offeredCards': offered_cards,
            'cardTypesWanted': wanted_cards
        }
        return self.make_request(f'/api/playing/request-trade?gameName={game_name}&playerId={player_id}', post_body=body)

    def accept_trade(self, game_name, player_id, negotiation_id, payment_cards):
        body = {
            'negotiationId': negotiation_id,
            'payment': payment_cards
        }
        return self.make_request(f'/api/playing/accept-trade?gameName={game_name}&playerId={player_id}', post_body=body)

    def make_request(self, path, post_body=None):
        if post_body:
            print('POST', path)
            r = requests.post(f'{self.base_url}{path}', json=post_body)
        else:
            print('GET', path)
            r = requests.get(f'{self.base_url}{path}')
        if r.status_code != 200:
            print("Error: " +str(r.status_code) + " - " +  r.text)
            exit()
        if not r.headers.get('Content-Type', '').startswith('application/json'):
            return r.text
        return r.json()
