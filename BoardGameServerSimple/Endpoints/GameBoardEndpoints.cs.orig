using BoardGameServer.Application;
using BoardGameServer.Application.Services;
using SharedModels;
using Microsoft.AspNetCore.Mvc;
<<<<<<< HEAD
using System.Text.Json;
=======
using BoardGameServer.Application.Models;
>>>>>>> 441acfa20c452c1734dc8c952edbb8a4e51cd5b4
namespace BoardGameServerSimple.Endpoints;

public static class GameBoardEndpoints
{
    public static IEndpointRouteBuilder MapGameBoardEndpoints(this IEndpointRouteBuilder routes)
    {
        var group = routes.MapGroup("/api/game");

        group.MapGet("/", (string? playerId, [FromServices] GameService gameService) =>
        {
            Guid playerKey;
            var game = gameService.GetCurrentGame();
            Queue<Card> hand = new Queue<Card>(); ;
            //Foreløpig gjøres dette bare her
            game.CheckForTimeout();
            if (Guid.TryParse(playerId, out playerKey))
            {
                var p = game.Players.FirstOrDefault(p => p.Id == playerKey);
                if (p != null) hand = p.Hand;
            }
            var result = Game.CreateGameState(game, hand);
            return TypedResults.Ok<GameStateDto>(result);
        })
        .WithOpenApi(op =>
        {
            op.Summary = "Gets the state of the game";
            op.Description = "bruk din playerKey for å få se hånden din";
            return op;
        });

<<<<<<< HEAD
        group.MapGet("/join", (string name, [FromServices] GameService gameService) =>
=======
        group.MapPost("/join", (string name, [FromServices] GameService gameService) =>
>>>>>>> 441acfa20c452c1734dc8c952edbb8a4e51cd5b4
        {
            var game = gameService.GetCurrentGame();
            return TypedResults.Ok(game.Join(name));
        })
        .WithOpenApi(op =>
        {
            op.Summary = "Join the game with a display name";
            op.Description = "";
            return op;
        });

        group.MapGet("/start", ([FromServices] GameService gameService) =>
        {
            var game = gameService.GetCurrentGame();
            game.StartGame();
            return TypedResults.Ok();
        })
        .WithOpenApi(op =>
        {
            op.Summary = "Starts the game";
            op.Description = "Starts the game. This will destroy any game in progress.";
            return op;
        });

        group.MapGet("/stop", () =>
        {
            return TypedResults.Ok();
        })
        .WithOpenApi(op =>
        {
            op.Summary = "Stops the game";
            op.Description = "Stops the game and scores all players cards.";
            return op;
        });
        return routes;
    }
<<<<<<< HEAD
    static object CreateGameState(Game game, Queue<Card> hand)
    {
        return new
        {
            CurrentPlayer = game.CurrentPlayer == null ? "" : game.CurrentPlayer.Name,
            CurrentPhase = PhaseUtil.GetDescription(game.CurrentPhase),
            CurrentState = StateUtil.GetDescription(game.CurrentState),
            PhaseTimeLeft =  game.LastStateChange.AddMinutes(2) - DateTime.Now,

            Deck = game.Deck.Count(),
            AvailableTrades = game.TradingArea.Select(negotiaton => new
            {
                negotiaton.InitiatorId,
                OfferedCards = negotiaton.OfferedCards.Select(s=> s.Type).ToList(),
                negotiaton.CardTypesWanted
            }),
            DiscardPile = game.Discard,
            Players = game.Players
            ?.Select(p => new
            {
                p.Name,
                p.Coins,
                Fields = p.Fields.Select(kv => new { kv.Key, Card = kv.Value.Select(c => new { c.Id, c.Type }) }),
                Hand = p.Hand.Count(),
                DrawnCards = p.DrawnCards.Select(c => new { c.Id, c.Type }),
                TradedCards = p.TradedCards.Select(c => new { c.Id, c.Type })
            })?.ToList(),
            YourHand = hand.Select(c => new
            {
                FirstCard = hand.Peek() == c, //Bare for å gjøre det ekstra tydlig hvilket kort de kan spille
                c.Id,
                c.Type
            })
        };
    }
=======
>>>>>>> 441acfa20c452c1734dc8c952edbb8a4e51cd5b4
}
